{"version":3,"sources":["Navbar.tsx","TransactionActions.tsx","TransactionsList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","LoadTransactions","a","axios","get","then","response","data","catch","error","console","log","TransactionsList","props","state","transactions","activeRows","this","loadTransactions","setState","dateString","date","Date","toLocaleDateString","toLocaleTimeString","transactionId","includes","filter","rowId","push","scope","map","transaction","Fragment","key","onClick","toggleDetailsRow","amount","formatDate","effectiveDate","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2PAyBeA,MAtBf,WACI,OACI,yBAAKC,UAAU,kDACX,uBAAGA,UAAU,gBAAb,uBAGA,4BAAQA,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,iBAAiBC,gBAAc,gBAAgBC,gBAAc,QAAQC,aAAW,qBAChK,0BAAMN,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BO,GAAG,iBACzC,wBAAIP,UAAU,sBACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWQ,KAAK,KAA7B,OACI,0BAAMR,UAAU,WAAhB,mB,wECDrB,SAAeS,IAAtB,+B,4CAAO,4BAAAC,EAAA,4DACiB,oBADjB,SAGoBC,IAAMC,IAFT,qBAGfC,MAAK,SAASC,GACX,OAAOA,EAASC,QAEnBC,OAAM,SAASC,GAGZ,OAFAC,QAAQC,IAAIF,GAEL,MAVZ,cAGGH,EAHH,yBAaIA,GAbJ,4C,0BC2EQM,E,kDAtFX,WAAYC,GAAY,IAAD,8BACnB,cAAMA,IACDC,MAAQ,CACTC,aAAc,GACdC,WAAY,IAJG,E,gEAQnBC,KAAKC,qB,yKAIuBjB,I,OAAtBK,E,OACNW,KAAKE,SAAS,CACVJ,aAAcT,I,uIAIXc,GACP,IAAMC,EAAO,IAAIC,KAAKF,GAEtB,MAAM,SAAN,OAAgBC,EAAKE,qBAArB,YAA6CF,EAAKG,wB,uCAGrCC,GACb,IAAIT,EAAaC,KAAKH,MAAME,WAS5B,OAPGA,EAAWU,SAASD,GACnBT,EAAaA,EAAWW,QAAO,SAACC,GAAD,OAAWA,GAASH,KAGnDT,EAAWa,KAAKJ,GAGbR,KAAKE,SAAS,CACjBH,iB,+BAKE,IAAD,SACgCC,KAAKH,MAAlCC,EADH,EACGA,aAAcC,EADjB,EACiBA,WACtB,OACI,yBAAKxB,UAAU,aACX,6CACA,uBAAGA,UAAU,QAAb,uCACA,wBAAIA,UAAU,SACd,6BACA,2BAAOA,UAAU,uCACb,+BACI,wBAAIA,UAAU,iBACV,wBAAIsC,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGR,+BAEQf,EAAagB,KAAI,SAACC,GAAD,OACb,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,EAAYjC,IAC7B,wBAAIP,UAAU,cAAc2C,QAAS,kBAAM,EAAKC,iBAAiBJ,EAAYjC,MACzE,wBAAI+B,MAAM,OAAOE,EAAYvC,MAC7B,wBAAID,UACqB,WAArBwC,EAAYvC,KAAoB,eAAiB,eAClDuC,EAAYK,SAEnB,wBAAI7C,UAAS,iCAA4BwB,EAAWU,SAASM,EAAYjC,IAAM,SAAW,KACtF,sCAEKiC,EAAYjC,IAEjB,4BAEQ,EAAKuC,WAAWN,EAAYO,4B,GAzE7CC,IAAMC,W,YCgBtBC,MAbf,WACI,OACI,6BACI,gCACI,kBAAC,EAAD,OAEJ,yBAAKlD,UAAU,gBACX,kBAAC,EAAD,SCDImD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdjD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiD,c","file":"static/js/main.a4d417fb.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg'\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <a className=\"navbar-brand\">\n                Accounting Notebook\n            </a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">Home\n                            <span className=\"sr-only\">(current)</span>\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport axios from 'axios';\n\nexport type Transaction = {\n    id: number,\n    type: string,\n    amount: number,\n    effectiveDate: Date,\n}\n\nexport type TransactionsListState = {\n    transactions: (Transaction)[],\n    activeRows: (number)[],\n}\n\nexport async function LoadTransactions() {\n    const url: string = '/api/transactions';\n\n    const response = await axios.get(url)\n        .then(function(response: any) {\n            return response.data;\n        })\n        .catch(function(error: any) {\n            console.log(error);\n\n            return [];\n        });\n\n    return response;\n}","import React from 'react';\nimport { TransactionsListState, LoadTransactions } from './TransactionActions';\n\nclass TransactionsList extends React.Component<{}, TransactionsListState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            transactions: [],\n            activeRows: [],\n        }\n    }\n    componentDidMount() {\n        this.loadTransactions();\n    }\n\n    async loadTransactions() {\n        const response: any = await LoadTransactions();\n        this.setState({\n            transactions: response,\n        });\n    }\n\n    formatDate(dateString: Date) {\n        const date = new Date(dateString);\n\n        return `Date: ${date.toLocaleDateString()} ${date.toLocaleTimeString()}`\n    }\n\n    toggleDetailsRow(transactionId: number) {\n        let activeRows = this.state.activeRows;\n\n        if(activeRows.includes(transactionId)) {\n            activeRows = activeRows.filter((rowId) => rowId != transactionId)\n        }\n        else {\n            activeRows.push(transactionId);\n        }\n\n        return this.setState({\n            activeRows,\n        });\n\n    }\n\n    render() {\n        const { transactions, activeRows } = this.state;\n        return (\n            <div className=\"jumbotron\">\n                <h3>Welcome back!</h3>\n                <p className=\"lead\">Here you can see your transactions.</p>\n                <hr className=\"my-4\" />\n                <br/>\n                <table className=\"table table-hover transactions-list\">\n                    <thead>\n                        <tr className=\"table-primary\">\n                            <th scope=\"col\">Type</th>\n                            <th scope=\"col\">Amount</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            transactions.map((transaction) => (\n                                <React.Fragment key={transaction.id}>\n                                    <tr className=\"primary-row\" onClick={() => this.toggleDetailsRow(transaction.id)}>\n                                        <th scope=\"row\">{transaction.type}</th>\n                                        <td className={\n                                            transaction.type === 'credit' ? 'text-success' : 'text-danger'\n                                        }>{transaction.amount}</td>\n                                    </tr>\n                                    <tr className={`table-dark details-row ${activeRows.includes(transaction.id) ? 'active' : ''}`}>\n                                        <td>\n                                            ID:&nbsp;\n                                            {transaction.id}\n                                        </td>\n                                        <td>\n                                            {\n                                                this.formatDate(transaction.effectiveDate)\n                                            }\n                                        </td>\n                                    </tr>\n                                </React.Fragment>\n                            ))\n                        }\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default TransactionsList;\n","import React from 'react';\nimport Navbar from './Navbar'\nimport TransactionsList from './TransactionsList'\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div>\n            <header>\n                <Navbar />\n            </header>\n            <div className=\"container-sm\">\n                <TransactionsList />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}